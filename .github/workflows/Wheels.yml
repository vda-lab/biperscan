name: Build Wheels
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

on: 
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'notebooks/**'
      - 'README.md'
      - '.gitignore'
      - '.github/workflows/Docs.yml'
      - '.github/workflows/Publish.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'notebooks/**'
      - 'README.md'
      - '.gitignore'
      - '.github/workflows/Docs.yml'
      - '.github/workflows/Publish.yml'
  workflow_dispatch:

jobs:
  test_cpp:
    name: Run c++ tests for cp${{ matrix.platform_id }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: ubuntu-latest
            platform_id: manylinux_x86_64
          - os: windows-latest
            platform_id: win_amd64
          #- os: macos-latest
          #  platform_id: macosx_x86_64
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Install cmake
      #   if: runner.os == 'Windows'
      #   uses: ssrobins/install-cmake@v1
      
      - name: Install gcc
        if: runner.os == 'Linux'
        run: |
          g++ -v
          sudo apt-get update && sudo apt-get install -y g++-14 && sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-14 100
      
      # - name: Configure Xcode
      #   if: runner.os == 'macOS'
      #   run: sudo xcode-select -s /Applications/Xcode_16.3.app/Contents/Developer

      - name: Build and run tests
        run: |
          cd src/biperscan/cpp
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --target tests --config Release
          cd tests
          if [ "$RUNNER_OS" == "Linux" ]; then
            ./tests
          elif [ "$RUNNER_OS" == "Windows" ]; then
            ./Release/tests.exe
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash

  build_sdist:
    name: Build sdist
    needs: test_cpp
    runs-on: ubuntu-24.04
    outputs:
      SDIST_NAME: ${{ steps.sdist.outputs.SDIST_NAME }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        name: Install python
        with: 
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y g++-14 && sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-14 100
          python -m pip install --upgrade pip
          pip install twine flake8 build

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Build sdist
        id: sdist
        run: |
          python -m build --sdist
          python ci/export_sdist_name.py

      - name: Check README rendering for PyPI
        run: twine check dist/*

      - name: Upload sdist result
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error 

  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    needs: build_sdist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            python: 310
            platform_id: win_amd64
          - os: windows-latest
            python: 311
            platform_id: win_amd64
          - os: windows-latest
            python: 312
            platform_id: win_amd64

          # Linux 64 bit manylinux_2_28 for g++-14
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: manylinux_2_28 
          - os: ubuntu-latest
            python: 311
            platform_id: manylinux_x86_64
            manylinux_image: manylinux_2_28 
          - os: ubuntu-latest
            python: 312
            platform_id: manylinux_x86_64
            manylinux_image: manylinux_2_28 

          # # MacOS x86_64
          # - os: macos-latest
          #   python: 310
          #   platform_id: macosx_x86_64
          # - os: macos-latest
          #   python: 311
          #   platform_id: macosx_x86_64
          # - os: macos-latest
          #   python: 312
          #   platform_id: macosx_x86_64
    steps:
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: Build and Test wheels
        uses: pypa/cibuildwheel@v2.17.0
        with: 
          package-dir: dist/${{ needs.build_sdist.outputs.SDIST_NAME }}
          output-dir: wheelhouse
        env:
          # CIBW_BEFORE_ALL_MACOS: sudo xcode-select -s /Applications/Xcode_16.3.app/Contents/Developer
          CIBW_BEFORE_ALL_LINUX: dnf install -y gcc-toolset-14
          CIBW_ENVIRONMENT_LINUX: CC=/opt/rh/gcc-toolset-14/root/usr/bin/g++ CXX=/opt/rh/gcc-toolset-14/root/usr/bin/g++ PATH=/opt/rh/gcc-toolset-14/root/usr/bin:$PATH
          CIBW_ARCHS: all
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD_FRONTEND: build
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_REQUIRES: pytest matplotlib pandas networkx
          CIBW_TEST_COMMAND: python -c "from biperscan.tests import run_tests; run_tests()"

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python }}-${{ matrix.platform_id }}
          path: wheelhouse/*.whl
          if-no-files-found: error
